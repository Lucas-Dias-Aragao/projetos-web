Passo 1: Configuração do Ambiente
Certifique-se de ter o Node.js instalado no seu sistema. Você pode verificar digitando node -v no terminal.

Passo 2: Criar uma Pasta e Iniciar um Projeto Node.js
Crie uma nova pasta para o projeto.
Abra um terminal na pasta e execute npm init -y para iniciar um novo projeto Node.js com as configurações padrão.
Passo 3: Instalar Dependências
Você precisará instalar algumas dependências para lidar com requisições HTTP e manipulação de arquivos:

bash
Copiar código
npm install express body-parser fs --save
express: Um framework web para Node.js que facilita a criação de APIs.
body-parser: Um middleware para Express que facilita o acesso aos dados enviados nos corpos das requisições HTTP.
fs: Módulo nativo do Node.js para interação com o sistema de arquivos.
Passo 4: Criar o Servidor Express
Crie um arquivo chamado server.js (ou outro nome de sua preferência) e adicione o seguinte código:

javascript
Copiar código
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();

// Middleware para processar dados de formulário
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Rota para lidar com o POST do formulário
app.post('/salvar-dados', (req, res) => {
    const { nome, email, mensagem } = req.body;

    // Formato dos dados para salvar no arquivo
    const dados = `Nome: ${nome}\nEmail: ${email}\nMensagem: ${mensagem}\n\n`;

    // Caminho e nome do arquivo onde os dados serão salvos
    const arquivo = 'dados_formulario.txt';

    // Append dos dados ao arquivo
    fs.appendFile(arquivo, dados, (err) => {
        if (err) {
            console.error(err);
            res.status(500).send('Erro ao salvar os dados.');
        } else {
            console.log('Dados salvos com sucesso!');
            res.status(200).send('Dados salvos com sucesso!');
        }
    });
});

// Iniciar o servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});
Passo 5: Criar o Formulário HTML
Crie um arquivo index.html na mesma pasta do projeto com o seguinte conteúdo:

html
Copiar código
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Formulário</title>
</head>
<body>
    <form action="http://localhost:3000/salvar-dados" method="POST">
        <label for="nome">Nome:</label>
        <input type="text" id="nome" name="nome" required><br><br>
        
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>
        
        <label for="mensagem">Mensagem:</label><br>
        <textarea id="mensagem" name="mensagem" rows="4" cols="50" required></textarea><br><br>
        
        <button type="submit">Enviar</button>
    </form>
</body>
</html>
Passo 6: Executar o Servidor
Para iniciar o servidor, vá para o terminal na pasta do projeto e execute:

bash
Copiar código
node server.js
Isso iniciará o servidor na porta 3000 (ou na porta especificada) e você poderá acessar o formulário em http://localhost:3000 no seu navegador.

Passo 7: Testar o Funcionamento
Preencha o formulário e envie os dados. Eles serão processados pelo servidor Node.js, e um arquivo dados_formulario.txt será criado (se ainda não existir) ou terá os dados adicionados no final.

Observações
Este é um exemplo simples e básico. Em um ambiente real, considere adicionar validações, como validação de e-mail, sanitização de entrada de dados, tratamento de erros mais robusto, entre outras melhorias.
Sempre considere a segurança ao lidar com dados de formulário. Valide e sanitize as entradas adequadamente para evitar vulnerabilidades como ataques de injeção de SQL ou XSS.
Espero que isso ajude a iniciar seu projeto com Node.js e salvar dados de formulário em um arquivo .txt através de uma API!